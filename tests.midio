node Constant<T>() -> [value: T] {
   value: T
}

let test_const = Constant<Number>(value: 123)

type Json = Map | List | String | Number | Bool

node ParseJSON(input: String) -> [json: Json]
node JSONStringify(input: Json) -> [result: String]

type Resource = String

type(FilePath) Path = String

node StaticResource() -> [resource: Resource] {
    path: Path
}

node FilePath() -> [path: Path] {
    path: Path
}

node ReadFile(input: Path) -> [content: String]

node Logger(input: Any) -> []
node If(pred: Bool) -> [then: Unit, else: Unit]
node ForEach(items: List) -> [item: Any]


type(Code) Code = String
node Script(input: Any) -> [output: Any] {
    source: Code = \"fn run(value) {\n\n}\"
}

type Request = {
    url: String
}

type Response = {
    body: String
}

node HttpRequest(request: Null) -> [body: String] {
    url: String = \"https://api.agify.io?name=bella\"
}

node HttpEndpoint() -> [request: Request] {
    path: String = \"/hello\"
}

node HttpResponse(response: Response) -> []

let val = Constant<Bool>(value: false)
let rhaiLoggerTrue = Script(source: \"fn run() { 42 }\")
let rhaiLoggerFalse = Script(source: \"fn run() { 13371337 }\")
let if_true = If()
val.value -> if_true.input
if_true.then -> rhaiLoggerTrue.input
if_true.else -> rhaiLoggerFalse.input
let endpoint1 = HttpEndpoint()
let response1 = HttpResponse()
let scrip1 = Script(source: \"fn run(value) {
   #{
      body: \\\"kristian here\\\"
   }
}\")
endpoint1.request -> scrip1.input
scrip1.output -> response1.params

let httpRequest_0 = HttpRequest()
let parseJSON_1 = ParseJSON()
let script_2 = Script(source: \"fn run(value) {\nvalue.age \n}\")
httpRequest_0.body -> parseJSON_1.input
parseJSON_1.json -> script_2.input
